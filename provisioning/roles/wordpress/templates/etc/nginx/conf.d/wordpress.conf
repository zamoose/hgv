# During vagrant provisioning, this map of domains to the backend PHP processor is populated
map $host $upstream_by_domain_{{ enviro }} {
    hostnames;

    ## Upstream for {{ enviro }} ## After this line, domains are inserted by the provisioning scripts. Do Not Edit.

}

# During vagrant provisioning, this map to the backend PHP processor is populated
# If there is no cookie 'backend' or it's value doesn't match any of those specified,
# it will resolve to use the value of the variable $upstream_by_domain_... from the map above.
map $cookie_backend $upstream_target_{{ enviro }} {
    default $upstream_by_domain_{{ enviro }};
    hhvm    hhvm;
    php    php;
    php5    php;
    php7    php7;
}

# The server block for the non-varnish cached domains
server {
	listen          {{ nginx_listen_port }};
	server_name     {{ domains | join( " " ) }};
	root            {{ wp_doc_root }}/{{ enviro }};

	index index.php;
	access_log  /var/log/nginx/{{ enviro }}.access.log  wpengine;
	access_log  /var/log/nginx/{{ enviro }}.apachestyle.access.log  apachestandard;
	error_log  /var/log/nginx/{{ enviro }}.error.log warn;

	include /etc/nginx/conf.d/error-page;

	# WordPress blog rules.
	include /etc/nginx/conf.d/wordpress-site;

{% if wp.multisite | default(False) %}
	# WordPress multisite rules.
	include /etc/nginx/conf.d/wordpress-multisite;
{% endif %}

	# Add trailing slash to */wp-admin requests.
	rewrite /wp-admin$ $scheme://$host$uri/ permanent;

	# Directives to send expires headers and turn off 404 error logging.
	location ~* ^.+\.(ogg|ogv|svg|svgz|eot|otf|woff|mp4|ttf|rss|atom|jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf)$ {
		access_log off; log_not_found off; expires max;
	}

	# Uncomment one of the lines below for the appropriate caching plugin (if used).
	#include global/wordpress-wp-super-cache.conf;
	#include global/wordpress-w3-total-cache.conf;

	# Pass all .php files onto a php-fpm/php-fcgi server.
	location ~ \.php$ {
		# Enable for xhprof tracing
		fastcgi_param PHP_VALUE "auto_prepend_file={{ xhprof_root }}/external/header.php \n auto_append_file={{ xhprof_root }}/external/footer.php";

		fastcgi_split_path_info ^(.+\.php)(/.+)$;
		fastcgi_pass $upstream_target_{{ enviro }};
		fastcgi_intercept_errors on;
		fastcgi_index index.php;
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		include fastcgi_params;
		fastcgi_buffers 16 16k;
		fastcgi_buffer_size 32k;
	}
}

# Server block for the cache domains served for this docroot
server {
        listen          {{ nginx_listen_port }};
	server_name     {% for i in domains %}cache.{{ i }} {% endfor %};
        root            {{ wp_doc_root }}/{{ enviro }};

        index index.php;
        access_log  /var/log/nginx/cache.{{ enviro }}.access.log  wpengine;
        access_log  /var/log/nginx/cache.{{ enviro }}.apachestyle.access.log  apachestandard;
        error_log  /var/log/nginx/cache.{{ enviro }}.error.log warn;

        location / {
                proxy_set_header X-WP-ENVIRO "{{ enviro }}";
                proxy_set_header X-UPSTREAM-TARGET $upstream_target_{{ enviro }};

                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

                # If it's not a GET or HEAD, Varnish isn't going to cache it anyway, so just go straight to backend
                if ( $request_method !~* "get|head" ) {
                        proxy_pass http://backend;
                }

                proxy_pass http://varnish;
        }

}
